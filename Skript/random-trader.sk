options:
	skyblock: "world"
	witchname: "&5&lCadı Market"
	lore: "&r||&bSatış &f» &3{sell}||&bAlış &f» &3{buy}||&r"
	yeterikadarparanyok: "&cYeteri kadar paran yok."
	itemverildi: "&aBaşarıyla öğe verildi. Hesabınızdan {price} çekildi."
	yeterikadaröğenyok: "&cYeteri kadar öğen yok."
	itemsatıldı: "&cBaşarıyla item {price} oyun parasına satıldı."
	invfull: "&cEnvanter dolu!"
function getRandomPlayer() :: location:
	loop all players:
		world of loop-player is {@skyblock}
		return loop-player
function spawnWitchInIsland(l : location):
	wait 2 minutes
	spawn witch at {_l}
	delete {witch::random::*}
	set display name of last spawned entity to {@witchname}
function WitchMarket(p : player) :: inventory:
	set metadata tag "WitchMarket" of {_p} to chest inventory with 3 row with name {@witchname}
	set slot integers between 0 and 26 of (metadata tag "WitchMarket" of {_p}) to black stained glass pane named " "
	set slot 13 of (metadata tag "WitchMarket" of {_p}) to RandomItemForWitchMarket({_p})
	return metadata tag "WitchMarket" of {_p}
function RandomItemForWitchMarket(p : player) :: material:
	if {witch::random::%{_p}%::item} is not set:
		loop yaml nodes with keys "market" of "config":
			set {witch::random::%{_p}%::c} to loop-value
			set {witch::random::%{_p}%::item} to random element out of (yaml nodes with keys "market.%loop-value%.items" of "config")
			set {witch::random::%{_p}%::off} to (random element of integers between -50 and 50)
	set {_newprice::*} to (yaml value "market.%{witch::random::%{_p}%::c}%.items.%{witch::random::%{_p}%::item}%" of "config") split at ";"
	set {_lore} to {@lore}
	set {_lore::*} to {_lore} split at "||"
	set {_sell} to ({_newprice::1} parsed as number) + ({_newprice::1} parsed as number) * ({witch::random::%{_p}%::off} / 100)
	set {_buy} to {_newprice::2} parsed as number + ({_newprice::2} parsed as number * {witch::random::%{_p}%::off} / 100)
	replace "{sell}" with "%{_sell}%" in {_lore}
	replace "{buy}" with "%{_buy}%" in {_lore}
	return ({witch::random::%{_p}%::item} parsed as material) with lore "%{_lore}%||&0%{_sell}%;%{_buy}%"
on inventory click:
	name of event-inventory is {@witchname}
	cancel event
	index of event-slot is 13
	set {_newprice::*} to uncolored (last element of (lore of event-item split at "||") split at ";")
	set {_sell} to {_newprice::1} parsed as number
	set {_buy} to {_newprice::2} parsed as number
	open MarketSelling(player, "%{witch::random::%player%::item}%", "%{witch::random::%player%::c}%", true) to player
on rightclick on witch:
	name of target entity of player is {@witchname}
	open WitchMarket(player) to player
command /consolecommand-witherspawn:
	executable by: console
	trigger:
		spawnWitchInIsland(getRandomPlayer())
import:
	org.bukkit.event.entity.ProjectileLaunchEvent
on ProjectileLaunchEvent:
	"%event.getEntity().getShooter()%" is "witch"
	event.setCancelled(true)
